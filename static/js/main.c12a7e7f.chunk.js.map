{"version":3,"sources":["components/GenericInput.js","components/PasswordError.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["GenericInput","type","fieldName","onChangeHandler","error","value","label","className","htmlFor","name","id","onChange","PasswordError","passwordError","containsDigit","containsUpperCase","containsLowerCase","containsSpecialXter","meetsLengthReq","Form","fields","onSubmitHandler","values","errors","inputs","map","field","count","onSubmit","App","useState","passwordValidation","setPasswordValidation","formik","useFormik","initialValues","txtFName","txtLName","txtEmail","txtPassword","txtPasswordAgain","alert","validate","test","length","handleChange","handleSubmit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c12a7e7f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst GenericInput = ({\n  type,\n  fieldName,\n  onChangeHandler,\n  error,\n  value,\n  label,\n}) => {\n  return (\n    <>\n      <span className='error'> {error} </span>\n      <label htmlFor={fieldName}> {label} </label>\n      <input\n        type={type}\n        name={fieldName}\n        id={fieldName}\n        onChange={onChangeHandler}\n        value={value}\n      />\n    </>\n  );\n};\n\nGenericInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChangeHandler: PropTypes.func.isRequired,\n};\n\nexport default GenericInput;\n","import PropTypes from 'prop-types';\n\nconst PasswordError = (passwordError) => {\n  const {\n    containsDigit,\n    containsUpperCase,\n    containsLowerCase,\n    containsSpecialXter,\n    meetsLengthReq,\n  } = passwordError.passwordError;\n\n  return (\n    <div>\n      <span className='pwrdError'>\n        {containsDigit ? (\n          <i className='fas fa-check-circle'> </i>\n        ) : (\n          <i className='fas fa-times-circle'> </i>\n        )}\n        Password must contain one or more digits\n      </span>\n      <span className='pwrdError'>\n        {containsUpperCase ? (\n          <i className='fas fa-check-circle'> </i>\n        ) : (\n          <i className='fas fa-times-circle'> </i>\n        )}\n        Password must contain one or more Uppercase character\n      </span>\n      <span className='pwrdError'>\n        {containsLowerCase ? (\n          <i className='fas fa-check-circle'> </i>\n        ) : (\n          <i className='fas fa-times-circle'> </i>\n        )}\n        Password must contain one or more lowercase character\n      </span>\n      <span className='pwrdError'>\n        {containsSpecialXter ? (\n          <i className='fas fa-check-circle'> </i>\n        ) : (\n          <i className='fas fa-times-circle'> </i>\n        )}\n        Password must contain one or more of: @, . + $ = * () {}_ - \\/\n      </span>\n      <span className='pwrdError'>\n        {meetsLengthReq ? (\n          <i className='fas fa-check-circle'> </i>\n        ) : (\n          <i className='fas fa-times-circle'> </i>\n        )}\n        Password must have at least six(6) characters\n      </span>\n    </div>\n  );\n};\n\nPasswordError.propTypes = {\n  passwordError: PropTypes.object.isRequired,\n};\n\nexport default PasswordError;\n","import GenericInput from './GenericInput';\nimport PasswordError from './PasswordError';\nimport PropTypes from 'prop-types';\n\nconst Form = ({\n  fields,\n  onChangeHandler,\n  onSubmitHandler,\n  values,\n  errors,\n  passwordError,\n}) => {\n  const inputs = fields.map((field, count) => {\n    return (\n      <GenericInput\n        type={field.type}\n        fieldName={field.name}\n        id={field.name}\n        onChangeHandler={onChangeHandler}\n        value={values[field.name]}\n        label={field.label}\n        key={count}\n        error={errors[field.name]}\n      />\n    );\n  });\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      {' '}\n      {inputs} <PasswordError passwordError={passwordError} />{' '}\n      <input type='submit' value='Register' />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  fields: PropTypes.array.isRequired,\n  onChangeHandler: PropTypes.func.isRequired,\n  onSubmitHandler: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired,\n  passwordError: PropTypes.object.isRequired,\n  values: PropTypes.object.isRequired,\n};\nexport default Form;\n","import Form from './components/Form';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [passwordValidation, setPasswordValidation] = useState({\n    containsDigit: false,\n    containsUpperCase: false,\n    containsLowerCase: false,\n    containsSpecialXter: false,\n    meetsLengthReq: false,\n  });\n  const MIN_PASSWORD_LENGTH = 6;\n  const formik = useFormik({\n    initialValues: {\n      txtFName: '',\n      txtLName: '',\n      txtEmail: '',\n      txtPassword: '',\n      txtPasswordAgain: '',\n    },\n\n    onSubmit: (values) => {\n      alert(\n        'Thank you for viewing my form validation with react and formik project!'\n      );\n    },\n    validate: (values) => {\n      let errors = {};\n\n      if (!values.txtFName) {\n        errors.txtFName = 'Field required';\n      } else {\n        if (!/[a-zA-Z]{2,}/.test(values.txtFName)) {\n          errors.txtFName = 'Enter a valid name';\n        }\n      }\n\n      if (!values.txtLName) {\n        errors.txtLName = 'Field required';\n      } else {\n        if (!/[a-zA-Z]{2,}/.test(values.txtLName)) {\n          errors.txtLName = 'Enter a valid name';\n        }\n      }\n\n      if (!values.txtEmail) {\n        errors.txtEmail = 'Field Required';\n      } else {\n        if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.txtEmail)\n        ) {\n          errors.txtEmail = 'Invalid email address';\n        }\n      }\n\n      if (!values.txtPassword) {\n        errors.txtPassword = 'Field Required';\n      } else {\n        passwordValidation.containsDigit = /\\d+/.test(values.txtPassword)\n          ? true\n          : false;\n\n        passwordValidation.containsUpperCase = /[A-Z]+/.test(values.txtPassword)\n          ? true\n          : false;\n\n        passwordValidation.containsLowerCase = /[a-z]+/.test(values.txtPassword)\n          ? true\n          : false;\n\n        passwordValidation.containsSpecialXter = /[@.+=$*\\\\/)(}{_-]+/.test(\n          values.txtPassword\n        )\n          ? true\n          : false;\n\n        passwordValidation.meetsLengthReq =\n          values.txtPassword.length >= MIN_PASSWORD_LENGTH ? true : false;\n\n        setPasswordValidation(passwordValidation);\n      }\n\n      if (!values.txtPasswordAgain) {\n        errors.txtPasswordAgain = 'Field Required';\n      } else {\n        if (values.txtPassword !== values.txtPasswordAgain) {\n          errors.txtPasswordAgain = 'Passwords must match';\n        }\n      }\n      return errors;\n    },\n  });\n\n  const fields = [\n    {\n      type: 'text',\n      name: 'txtFName',\n      label: 'First Name',\n    },\n    {\n      type: 'text',\n      name: 'txtLName',\n      label: 'Last Name',\n    },\n    {\n      type: 'email',\n      name: 'txtEmail',\n      label: 'Email',\n    },\n    {\n      type: 'password',\n      name: 'txtPassword',\n      label: 'Password',\n    },\n    {\n      type: 'password',\n      name: 'txtPasswordAgain',\n      label: 'Password Again',\n    },\n  ];\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <Form\n          fields={fields}\n          onChangeHandler={formik.handleChange}\n          onSubmitHandler={formik.handleSubmit}\n          values={formik.values}\n          errors={formik.errors}\n          passwordError={passwordValidation}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}